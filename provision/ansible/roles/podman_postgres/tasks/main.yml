---
- name: Create groups
  become: true
  register: _podman_postgres_groups
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
    system: true
  loop: "{{ podman_postgres_groups }}"
  notify: Restart postgres

- name: Ensure user is a group member
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: "{{ podman_postgres_groups }}"
    append: true
  notify: Restart postgres

- name: Create user
  become: true
  register: _podman_postgres_user
  ansible.builtin.user:
    comment: "{{ podman_postgres_name }}"
    create_home: false
    group: "{{ _podman_postgres_groups.results[0].gid }}"
    groups: "{{ podman_postgres_groups }}"
    home: "{{ podman_postgres_basedir }}"
    name: "{{ podman_postgres_id }}"
    password: "!"
    shell: "/usr/sbin/nologin"
    system: true
  notify: Restart postgres


- name: Ensure working directory exists
  become: true
  ansible.builtin.file:
    path: "{{ podman_postgres_basedir }}"
    state: directory
    owner: "{{ _podman_postgres_user.uid }}"
    group: "{{ _podman_postgres_groups.results[0].gid }}"
    mode: "u=rwX,g=,o="
    recurse: true
  notify: Restart postgres

- name: Ensure directories exist
  become: true
  ansible.builtin.file:
    path: "{{ podman_postgres_basedir }}/{{ item }}"
    state: directory
    owner: "{{ _podman_postgres_user.uid }}"
    group: "{{ _podman_postgres_groups.results[0].gid }}"
    mode: "u=rwX,g=,o="
    recurse: true
  loop:
    - data
  notify: Restart postgres


- name: Create secret podman_postgres_master_password
  become: true
  containers.podman.podman_secret:
    data: "{{ podman_postgres_master_password }}"
    force: true
    name: podman_postgres_master_password
    state: present
  notify: Restart postgres
- name: Create secret podman_postgres_master_user
  become: true
  containers.podman.podman_secret:
    data: "{{ podman_postgres_master_user }}"
    force: true
    name: podman_postgres_master_user
    state: present
  notify: Restart postgres


- name: Copy service files
  become: true
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ directory_systemd }}/{{ item }}"
    owner: root
    group: root
    mode: "0o644"
  loop:
    - postgres-exporter.service
    - postgres-main.service
    - postgres.service
  notify: Restart postgres

- name: Enable and check postgres service
  become: true
  ansible.builtin.systemd:
    enabled: true
    name: postgres
  notify: Restart postgres
