---
- name: Create groups
  become: true
  register: _groups
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
    system: true
  loop: "{{ podman_keycloak_groups }}"

- name: Ensure user is a group member
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: "{{ podman_keycloak_groups }}"
    append: true

- name: Create user
  become: true
  register: _user
  ansible.builtin.user:
    comment: "{{ podman_keycloak_name }}"
    create_home: false
    group: "{{ _groups.results[0].gid }}"
    groups: "{{ podman_keycloak_groups }}"
    home: "{{ podman_keycloak_basedir }}"
    name: "{{ podman_keycloak_id }}"
    password: "!"
    shell: "/usr/sbin/nologin"
    system: true


- name: Ensure working directory exists
  become: true
  ansible.builtin.file:
    path: "{{ podman_keycloak_basedir }}"
    state: directory
    owner: "{{ _user.uid }}"
    group: "{{ _groups.results[0].gid }}"
    mode: "u=rwX,g=rX"
    recurse: true

- name: Ensure directories exist
  become: true
  ansible.builtin.file:
    path: "{{ podman_keycloak_basedir }}/{{ item }}"
    state: directory
    owner: "{{ _user.uid }}"
    group: "{{ _groups.results[0].gid }}"
    mode: "u=rwX,g=rX"
    recurse: true
  loop:
    - data


- name: Create postgres user
  register: result
  retries: 3
  delay: 3
  until: result is not failed
  community.postgresql.postgresql_user:
    host: localhost
    login_password: "{{ podman_postgres_master_password }}"
    login_user: "{{ podman_postgres_master_user }}"
    name: "{{ podman_keycloak_pg_user }}"
    password: "{{ podman_keycloak_pg_password }}"

- name: Create postgres database
  register: result
  retries: 3
  delay: 3
  until: result is not failed
  community.postgresql.postgresql_db:
    host: localhost
    login_password: "{{ podman_postgres_master_password }}"
    login_user: "{{ podman_postgres_master_user }}"
    name: "{{ podman_keycloak_pg_db }}"
    owner: "{{ podman_keycloak_pg_user }}"

- name: "GRANT ALL PRIVILEGES ON DATABASE 'db' TO 'user'"
  community.postgresql.postgresql_privs:
    host: localhost
    login_password: "{{ podman_postgres_master_password }}"
    login_user: "{{ podman_postgres_master_user }}"
    db: postgres
    privs: ALL
    type: database
    obj: "{{ podman_keycloak_pg_db }}"
    role: "{{ podman_keycloak_pg_user }}"

- name: "GRANT USAGE, CREATE ON SCHEMA PUBLIC TO 'user'"
  community.postgresql.postgresql_privs:
    host: localhost
    login_password: "{{ podman_postgres_master_password }}"
    login_user: "{{ podman_postgres_master_user }}"
    db: postgres
    privs: CREATE
    type: schema
    obj: public
    role: "{{ podman_keycloak_pg_user }}"


- name: Create secret podman_keycloak_admin
  become: true
  containers.podman.podman_secret:
    data: "{{ podman_keycloak_admin }}"
    force: true
    name: podman_keycloak_admin
    state: present
- name: Create secret podman_keycloak_admin_password
  become: true
  containers.podman.podman_secret:
    data: "{{ podman_keycloak_admin_password }}"
    force: true
    name: podman_keycloak_admin_password
    state: present


- name: Copy service files
  become: true
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ directory_systemd }}/{{ item }}"
    owner: root
    group: root
    mode: "0o644"
  loop:
    - keycloak.service

- name: Enable and check keycloack service
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
    enabled: true
    name: keycloak
    state: restarted
