---
- name: Get postgres container ID
  become: true
  ansible.builtin.shell: cat /run/container-postgres.ctr-id
  register: postgres_ctr_id

- name: Create lemmy database
  become: true
  ansible.builtin.command: podman exec {{ postgres_ctr_id.stdout }} createdb lemmy
  register: lemmy_create_database
  failed_when: 
    - lemmy_create_database.rc != 0
    - "'already exists' not in lemmy_create_database.stderr"

- name: Create lemmy database user
  become: true
  ansible.builtin.command: podman exec {{ postgres_ctr_id.stdout }} createuser lemmy
  register: lemmy_create_user
  failed_when: 
    - lemmy_create_user.rc != 0 
    - "'already exists' not in lemmy_create_database.stderr"

- name: Set password for lemmy user.
  become: true
  ansible.builtin.command: podman exec {{ postgres_ctr_id.stdout }} psql --command "ALTER USER lemmy WITH ENCRYPTED PASSWORD 'lemmy'";

- name: Grant database access to lemmy user.
  become: true
  ansible.builtin.command: podman exec {{ postgres_ctr_id.stdout }} psql --command "GRANT ALL PRIVILEGES ON DATABASE lemmy TO lemmy";

- name: Ensure working directory exists
  become: true
  ansible.builtin.file:
    path: "{{ lemmy_basedir }}/config"
    state: directory
    owner: "{{ ansible_user }}"

- name: Copy Lemmy configuration
  become: true
  ansible.builtin.template:
    src: "config.hjson.j2"
    dest: "{{ lemmy_basedir }}/config/config.hjson"
    owner: root
    group: root
    mode: 0600

- name: Copy Lemmy service file
  become: true
  ansible.builtin.template:
    src: "lemmy.service.j2"
    dest: "{{ directory_systemd }}/lemmy.service"
    owner: root
    group: root
    mode: 0644

- name: Enable and check Lemmy service
  become: true
  ansible.builtin.systemd:
    name: lemmy
    daemon_reload: yes
    state: restarted
    enabled: yes
