---
- name: Add GoLift Repository
  become: true
  register: result
  retries: 3
  delay: 3
  until: result is not failed
  ansible.builtin.deb822_repository:
    name: golift
    types: [deb]
    uris: https://packagecloud.io/golift/pkgs/ubuntu
    suites: [focal]
    components: [main]
    signed_by: https://packagecloud.io/golift/pkgs/gpgkey
    state: present
    enabled: true
  notify: Restart qbittorrent

- name: Install Unpackerr
  become: true
  register: result
  retries: 3
  delay: 3
  until: result is not failed
  ansible.builtin.apt:
    name:
      - unpackerr
    state: present
    update_cache: true
  notify: Restart qbittorrent

- name: Copy Unpackerr configuration
  become: true
  ansible.builtin.template:
    src: unpackerr.conf.j2
    dest: "/etc/unpackerr/unpackerr.conf"
    owner: "unpackerr"
    group: "unpackerr"
    mode: "0o600"
  notify: Restart qbittorrent

- name: Ensure unpackerr is a group member
  become: true
  ansible.builtin.user:
    name: unpackerr
    groups: "{{ podman_qbittorrent_groups }}"
    append: true
  notify: Restart qbittorrent

# qBittorrent

- name: Create groups
  become: true
  register: _groups
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
    system: true
  loop: "{{ podman_qbittorrent_groups }}"
  notify: Restart qbittorrent

- name: Ensure user is a group member
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: "{{ podman_qbittorrent_groups }}"
    append: true
  notify: Restart qbittorrent

- name: Ensure root is a group member
  become: true
  ansible.builtin.user:
    name: root
    groups: "{{ podman_qbittorrent_groups }}"
    append: true
  notify: Restart qbittorrent

- name: Create user
  become: true
  register: _user
  ansible.builtin.user:
    comment: "{{ podman_qbittorrent_name }}"
    create_home: false
    group: "{{ _groups.results[0].gid }}"
    groups: "{{ podman_qbittorrent_groups }}"
    home: "{{ podman_qbittorrent_basedir }}"
    name: "{{ podman_qbittorrent_id }}"
    password: "!"
    shell: "/usr/sbin/nologin"
    system: true
  notify: Restart qbittorrent


- name: Ensure working directory exists
  become: true
  ansible.builtin.file:
    path: "{{ podman_qbittorrent_basedir }}"
    state: directory
    owner: "{{ _user.uid }}"
    group: "{{ _groups.results[0].gid }}"
    mode: "u=rwX,g=,o="
    recurse: false
  notify: Restart qbittorrent

- name: Ensure directories exist
  become: true
  ansible.builtin.file:
    path: "{{ podman_qbittorrent_basedir }}/{{ item }}"
    state: directory
    owner: "{{ _user.uid }}"
    group: "{{ _groups.results[0].gid }}"
    mode: "u=rwX,g=,o="
    recurse: false
  loop:
    - config
    - wireguard
  notify: Restart qbittorrent


- name: Copy wireguard configuration
  become: true
  ansible.builtin.template:
    src: wg0.conf.j2
    dest: "{{ podman_qbittorrent_basedir }}/wireguard/wg0.conf"
    owner: "{{ _user.uid }}"
    group: "{{ _groups.results[0].gid }}"
    mode: "0o600"
  notify: Restart qbittorrent


- name: Copy service files
  become: true
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ directory_systemd }}/{{ item }}"
    owner: root
    group: root
    mode: "0o644"
  loop:
    - qbittorrent-exporter.service
    - qbittorrent-flood.service
    - qbittorrent-main.service
    - qbittorrent-natmap.service
    - qbittorrent-wg.service
    - qbittorrent.service
  notify: Restart qbittorrent

- name: Enable and check qbittorrent service
  become: true
  ansible.builtin.systemd:
    enabled: true
    name: qbittorrent
  notify: Restart qbittorrent
