---
- name: Ensure working directory exists
  become: true
  ansible.builtin.file:
    path: "{{ podman_pihole_basedir }}"
    state: directory
    owner: root
    group: root
    mode: "u=rwX,g=rX,o="
    recurse: false
  notify: Restart pihole

- name: Ensure directories exist dnsmasq.d
  become: true
  ansible.builtin.file:
    path: "{{ podman_pihole_basedir }}/etc/dnsmasq.d"
    state: directory
    owner: 1000
    group: 33
    mode: "u=rwX,g=rX,o="
    recurse: false
  notify: Restart pihole

- name: Ensure directories exist pihole
  become: true
  ansible.builtin.file:
    path: "{{ podman_pihole_basedir }}/etc/pihole"
    state: directory
    owner: 999
    group: 1000
    mode: "u=rwX,g=rwX,o="
    recurse: false
  notify: Restart pihole


- name: Forward the host DNS zone to the aardvark DNS backend on the host
  become: true
  ansible.builtin.template:
    src: "20-forward-host-realm.conf.j2"
    dest: "{{ podman_pihole_basedir }}/etc/dnsmasq.d/20-forward-host-realm.conf"
    owner: 1000
    group: 33
    mode: "0o640"
  notify: Restart pihole

- name: Copy configuration
  become: true
  ansible.builtin.copy:
    src: "pihole.toml"
    dest: "{{ podman_pihole_basedir }}/etc/pihole/pihole.toml"
    owner: 1000
    group: 33
    mode: "0o640"
  notify: Restart pihole


- name: Create secret podman_pihole_webpassword
  become: true
  containers.podman.podman_secret:
    data: "{{ podman_pihole_webpassword }}"
    force: true
    name: podman_pihole_webpassword
    state: present
  notify: Restart pihole


- name: Pull service image
  become: true
  register: podman_pihole_result
  retries: 3
  delay: 3
  until: podman_pihole_result is not failed
  containers.podman.podman_image:
    force: "{{ podman_pihole_version == 'latest' }}"
    name: "{{ registry_dockerio }}/pihole/pihole:{{ podman_pihole_version }}"
  notify: Restart pihole

- name: Copy service files
  become: true
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ podman_pihole_directory_systemd }}/{{ item }}"
    owner: root
    group: root
    mode: "0o644"
  loop:
    - pihole.service
  notify: Restart pihole

- name: Enable and check pihole service
  become: true
  ansible.builtin.systemd:
    enabled: true
    name: pihole
  notify: Restart pihole
